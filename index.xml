<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Sanchez</title>
    <link>https://isanchez.net/</link>
    <description>Recent content on Ivan Sanchez</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 24 Sep 2019 21:03:59 +0100</lastBuildDate>
    
	<atom:link href="https://isanchez.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://isanchez.net/about/</link>
      <pubDate>Tue, 24 Sep 2019 21:03:59 +0100</pubDate>
      
      <guid>https://isanchez.net/about/</guid>
      <description>Hi, this is my page.</description>
    </item>
    
    <item>
      <title>Deployments vs Releases</title>
      <link>https://isanchez.net/posts/2018-10-30-deployments-vs-releases/</link>
      <pubDate>Tue, 30 Oct 2018 21:00:00 +0100</pubDate>
      
      <guid>https://isanchez.net/posts/2018-10-30-deployments-vs-releases/</guid>
      <description>When a team is looking to move towards Continuous Delivery, it comes a time when itâ€™s essential to differentiate deployment from release.
Traditionally, new versions of the software are built, tested, and made available to users in cycles that vary from once every few days to every few months. In that context, each new version will most likely contain some visible impact to the user, so the words release and deployment tend to be used interchangeably to express when a new version has reached users.</description>
    </item>
    
    <item>
      <title>Learning a new codebase from its history beyond the code</title>
      <link>https://isanchez.net/posts/2018-08-20-learning-a-new-codebase-from-its-history-beyond-the-code/</link>
      <pubDate>Mon, 20 Aug 2018 21:00:00 +0100</pubDate>
      
      <guid>https://isanchez.net/posts/2018-08-20-learning-a-new-codebase-from-its-history-beyond-the-code/</guid>
      <description>One of the most challenging aspects of learning a new codebase is to understand how things got to be the way they are now. Rather than viewing the current code/documentation as the current representation of reality, I find useful to see them as the result of many internal and external influences over time.
As developers, we tend to see source control as the official history of a codebase. Unfortunately, just looking at the previous commits, no matter how well organised they are, is barely enough to understand the decisions that shaped the system.</description>
    </item>
    
  </channel>
</rss>